---
description: 实现具体开发任务，包括功能开发、bug修复和代码重构
globs: ""
alwaysApply: false
---
# Implement Task

实现具体开发任务，包括功能开发、bug修复和代码重构。

## 任务类型:

### 1. 功能开发
- ✨ 新功能实现
- 📱 小程序页面开发
- 🖼️ UI组件实现
- 📊 报表和数据分析功能
- 💰 POS收银功能
- 👥 会员管理功能
- 📦 商品管理功能
- 📋 订单管理功能

### 2. Bug修复
- 🐛 修复已知问题
- 🔧 解决性能问题
- 🔒 安全漏洞修复
- 🔄 兼容性问题修复

### 3. 代码重构
- ♻️ 代码结构优化
- 🎨 代码风格改进
- ⚡️ 性能优化
- 🧹 清理无用代码

## 小程序开发流程:

### 1. 页面开发
1. 创建页面目录结构
2. 实现页面JSX/TSX逻辑
3. 编写页面样式CSS/SCSS
4. 添加页面配置（如果需要）
5. 连接状态管理（如需要）

### 2. 组件开发
1. 创建组件目录和文件
2. 实现组件JSX/TSX逻辑
3. 编写组件样式
4. 定义组件属性和接口
5. 添加组件文档注释

### 3. 功能实现
1. 分析需求和规格
2. 设计实现方案
3. 编写代码实现
4. 添加必要注释
5. 进行自测验证

## 实现步骤:

### 1. 准备阶段
- 理解任务需求
- 分析影响范围
- 设计实现方案
- 准备开发环境

### 2. 编码阶段
- 遵循项目代码规范
- 编写清晰的注释
- 保持代码简洁
- 及时提交阶段性成果

### 3. 测试阶段
- 进行单元测试（如适用）
- 执行功能测试
- 验证边界条件
- 检查异常处理

### 4. 审查阶段
- 代码自审
- 性能评估
- 安全检查
- 文档更新

## 小程序特定注意事项:

### 1. Taro框架使用
- 正确使用Taro组件
- 遵循Taro生命周期
- 处理跨端兼容性
- 优化渲染性能

### 2. 微信小程序规范
- 遵循小程序页面结构
- 正确使用小程序API
- 处理页面路由和导航
- 管理全局和页面状态

### 3. 性能优化
- 减少不必要的渲染
- 优化数据传输
- 合理使用缓存
- 控制包大小

## 最佳实践:

- 保持代码模块化和可重用性
- 编写清晰的文档和注释
- 遵循团队编码规范
- 及时沟通和反馈问题
- 保证代码质量和可维护性