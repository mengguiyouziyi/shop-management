---
description: 通用项目开发规则和最佳实践
globs: "**/*"
alwaysApply: true
---
# 通用项目开发规则

## 代码规范

### 1. 通用命名规范
- 使用有意义的变量和函数名
- 避免使用缩写和单字母变量名（循环计数器除外）
- 布尔值变量使用is、has、can等前缀
- 函数名使用动词开头，表示其执行的操作

### 2. 注释规范
- 函数和类需要文档注释，说明用途、参数和返回值
- 复杂业务逻辑添加行内注释解释
- 及时更新过时的注释
- 删除无用的注释代码

### 3. 代码组织
- 相关功能组织在同一模块或目录下
- 避免循环依赖
- 合理使用设计模式
- 保持函数和模块的单一职责

## Git工作流

### 1. 分支管理
- 使用Git Flow或GitHub Flow
- 功能开发使用feature分支
- 发布使用release分支
- 热修复使用hotfix分支

### 2. 提交信息规范
- 使用传统提交格式 (Conventional Commits)
- 提交信息包含类型、范围和描述
- 使用表情符号增强可读性
- 保持提交原子性

### 3. 代码审查
- 所有代码变更需要经过代码审查
- 审查关注代码质量、性能和安全性
- 提供建设性的反馈意见
- 及时处理审查意见

## 测试规范

### 1. 测试策略
- 遵循测试金字塔原则
- 单元测试覆盖核心业务逻辑
- 集成测试验证模块间交互
- 端到端测试覆盖核心用户流程

### 2. 测试编写
- 测试用例具有明确的描述
- 测试数据使用合理的测试夹具
- 避免测试间的依赖关系
- 及时更新失效的测试

## 文档规范

### 1. 技术文档
- README包含项目介绍、安装和使用说明
- API文档描述接口规范和示例
- 架构文档说明系统设计和组件关系

### 2. 业务文档
- 用户手册描述功能使用方法
- 部署文档说明部署流程和配置
- 故障处理文档记录常见问题和解决方案

## 安全规范

### 1. 代码安全
- 输入验证和过滤
- 防止SQL注入和XSS攻击
- 敏感信息加密存储
- 依赖库安全检查

### 2. 访问控制
- 最小权限原则
- 身份认证和授权机制
- 安全日志记录和监控

## 性能优化

### 1. 前端性能
- 减少HTTP请求数量
- 资源压缩和缓存
- 图片优化和懒加载
- 代码分割和懒加载

### 2. 后端性能
- 数据库查询优化
- 缓存策略实施
- 异步处理耗时操作
- 负载均衡和水平扩展

## 部署和运维

### 1. 持续集成/持续部署
- 自动化构建和测试
- 环境一致性保证
- 部署回滚机制
- 监控和告警设置

### 2. 日志和监控
- 结构化日志记录
- 性能指标监控
- 错误追踪和报警
- 用户行为分析

## 团队协作

### 1. 编码协作
- 统一的代码风格和规范
- 定期代码审查
- 知识分享和技术交流
- 结对编程解决复杂问题

### 2. 项目管理
- 明确的需求定义
- 合理的任务分解和估算
- 定期的进度同步和回顾
- 持续的改进和优化