---
description: 小程序项目开发规则和最佳实践
globs: "apps/mp/**/*"
alwaysApply: true
---
# 小程序项目开发规则

## 项目结构规范

### 页面结构
```
pages/
├── moduleName/
│   ├── index.jsx      # 页面逻辑
│   ├── index.css      # 页面样式
│   └── components/    # 页面级组件
```

### 组件结构
```
components/
├── componentName/
│   ├── index.jsx      # 组件逻辑
│   └── index.css      # 组件样式
```

## 编码规范

### 1. 命名规范
- 文件名：小写字母，多个单词用连字符分隔 (kebab-case)
- 组件名：大驼峰命名 (PascalCase)
- 变量名：小驼峰命名 (camelCase)
- 常量名：大写字母，单词间用下划线分隔 (UPPER_CASE)

### 2. 组件开发规范
- 使用类组件或函数组件（推荐Hooks）
- 组件属性需要类型检查（PropTypes或TypeScript）
- 组件应具有清晰的接口和文档注释
- 避免过大的组件，适时拆分

### 3. 样式规范
- 使用CSS Modules或BEM命名规范避免样式冲突
- 移动端适配使用rpx单位
- 样式文件与组件/页面文件同级
- 避免使用内联样式

## Taro框架使用规范

### 1. 生命周期
- 正确使用Taro生命周期方法
- 页面组件使用useDidShow、useDidHide等Hooks
- 合理使用useReady替代didMount

### 2. 路由管理
- 使用Taro.navigateTo进行页面跳转
- 使用Taro.switchTab切换Tab页面
- 传递参数时注意数据序列化

### 3. 状态管理
- 使用React Context或Redux进行全局状态管理
- 页面级状态可使用useState Hooks
- 复杂状态逻辑使用useReducer

## 性能优化

### 1. 渲染优化
- 列表渲染使用key属性
- 避免在render中进行复杂计算
- 使用React.memo优化函数组件

### 2. 网络请求
- 合理使用请求缓存
- 实现请求防抖和节流
- 错误处理和加载状态提示

### 3. 包体积优化
- 按需引入第三方库
- 移除未使用的代码
- 图片资源压缩和格式优化

## 代码质量

### 1. 错误处理
- 网络请求添加try-catch
- 组件边界错误处理
- 用户输入验证

### 2. 测试
- 关键业务逻辑添加单元测试
- 页面组件添加快照测试
- 端到端测试覆盖核心流程

## 安全规范

### 1. 数据安全
- 用户敏感信息加密存储
- 网络请求使用HTTPS
- 防止XSS攻击

### 2. 权限控制
- 页面访问权限校验
- 功能操作权限检查
- 用户身份认证

## 最佳实践

### 1. 代码复用
- 提取通用组件和工具函数
- 建立组件库和工具库
- 避免重复代码

### 2. 开发效率
- 使用ESLint和Prettier保证代码风格
- 配置合适的开发工具和插件
- 建立代码审查机制

### 3. 文档规范
- 组件添加PropTypes或TypeScript类型定义
- 复杂业务逻辑添加注释说明
- 更新相关文档