---
description: 创建格式良好的提交信息，使用传统提交格式和表情符号
globs: ""
alwaysApply: false
---
# Commit

创建格式良好的提交，使用传统提交消息和表情符号。

## 功能:
- 默认运行预提交检查（lint、build、生成文档）
- 如果没有暂存文件则自动暂存适当文件
- 使用传统提交格式和描述性表情符号
- 建议为不同关注点拆分提交

## 使用方法:
- `/commit` - 标准提交并进行预提交检查
- `/commit --no-verify` - 跳过预提交检查

## 提交类型:
- ✨ feat: 新功能
- 🐛 fix: 修复bug
- 📝 docs: 文档更改
- ♻️ refactor: 代码重构，不改变功能
- 🎨 style: 代码格式化，缺少分号等
- ⚡️ perf: 性能改进
- ✅ test: 添加或修正测试
- 🧑‍💻 chore: 工具、配置、维护
- 🚧 wip: 进行中的工作
- 🔥 remove: 删除代码或文件
- 🚑 hotfix: 紧急修复
- 🔒 security: 安全改进

## 小程序项目特定类型:
- 📱 mp: 小程序相关更改
- 🖼️ ui: 用户界面和样式更改
- 📊 report: 报表和数据分析功能
- 💰 pos: POS收银功能
- 👥 member: 会员管理功能
- 📦 product: 商品管理功能
- 📋 order: 订单管理功能

## 流程:
1. 检查暂存更改 (`git status`)
2. 如果没有暂存更改，审查并暂存适当文件
3. 运行预提交检查（除非使用--no-verify）
4. 分析更改以确定提交类型
5. 生成描述性提交消息
6. 如适用包含范围: `type(scope): description`
7. 为复杂更改添加正文，解释原因
8. 执行提交

## 最佳实践:
- 保持提交原子性和专注性
- 使用祈使语气编写（"添加功能"而不是"已添加功能"）
- 解释原因，而不仅仅是内容
- 如相关请引用问题/PR
- 将不相关更改拆分为单独提交